}
}
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
gens <- 200
birth <- .01
origins <- 1
history <- function(gens, birth){
lineages <- list()
# the root of the tree
lineages[[1]] <- 0
# loop through generations with i
for(i in 2:gens-1){
# create next gen of every existing lineage
for(j in 1:length(lineages)){
lineages[[j]] <- c(lineages[[j]], rnorm(1))
}
# give each lineage an opportunity to split/speciate
for(k in 1:length(lineages)){
if(runif(1, min=0, max=1) < birth){
lineages[[length(lineages) + 1]] <- cumsum(lineages[[k]])[length(lineages[[k]])]
origins <- c(origins, i)
}
}
}
gens <- 200
birth <- .01
origins <- 1
history <- function(gens, birth){
lineages <- list()
# the root of the tree
lineages[[1]] <- 0
# loop through generations with i
for(i in 2:(gens-1)){
# create next gen of every existing lineage
for(j in 1:length(lineages)){
lineages[[j]] <- c(lineages[[j]], rnorm(1))
}
# give each lineage an opportunity to split/speciate
for(k in 1:length(lineages)){
if(runif(1, min=0, max=1) < birth){
lineages[[length(lineages) + 1]] <- cumsum(lineages[[k]])[length(lineages[[k]])]
origins <- c(origins, i)
}
}
}
gens <- 200
birth <- .01
origins <- 1
history <- function(gens, birth){
lineages <- list()
# the root of the tree
lineages[[1]] <- 0
# loop through generations with i
for(i in 2:(gens-1)){
# create next gen of every existing lineage
for(j in 1:length(lineages)){
lineages[[j]] <- c(lineages[[j]], rnorm(1))
}
# give each lineage an opportunity to split/speciate
for(k in 1:length(lineages)){
if(runif(1, min=0, max=1) < birth){
lineages[[length(lineages) + 1]] <- cumsum(lineages[[k]])[length(lineages[[k]])]
origins <- c(origins, i)
}
}
}
gens <- 200
birth <- .01
origins <- 1
lineages <- list()
# the root of the tree
lineages[[1]] <- 0
# loop through generations with i
for(i in 2:(gens-1)){
# create next gen of every existing lineage
for(j in 1:length(lineages)){
lineages[[j]] <- c(lineages[[j]], rnorm(1))
}
# give each lineage an opportunity to split/speciate
for(k in 1:length(lineages)){
if(runif(1, min=0, max=1) < birth){
lineages[[length(lineages) + 1]] <- cumsum(lineages[[k]])[length(lineages[[k]])]
origins <- c(origins, i)
}
}
}
lineages <- list()
# the root of the tree
lineages[[1]] <- 0
# loop through generations with i
for(i in 2:(gens)){
# create next gen of every existing lineage
for(j in 1:length(lineages)){
lineages[[j]] <- c(lineages[[j]], rnorm(1))
}
# give each lineage an opportunity to split/speciate
for(k in 1:length(lineages)){
if(runif(1, min=0, max=1) < birth){
lineages[[length(lineages) + 1]] <- cumsum(lineages[[k]])[length(lineages[[k]])]
origins <- c(origins, i)
}
}
}
gens <- 200
birth <- .01
list.to.mat <- function(rows,starts, gens){
# rows is a list with the data for some or all rows
# starts the positions that the above should start in th matrix
# gens a numeric with the number of generations
mat.x <- matrix(0,length(rows), gens)
for(i in 1:length(rows)){
mat.x[i, origins:gens] <- rows[[i]]
}
return(mat.x)
}
origins <- 1
lineages <- list()
# the root of the tree
lineages[[1]] <- 0
# loop through generations with i
for(i in 2:(gens)){
# create next gen of every existing lineage
for(j in 1:length(lineages)){
lineages[[j]] <- c(lineages[[j]], rnorm(1))
}
# give each lineage an opportunity to split/speciate
for(k in 1:length(lineages)){
if(runif(1, min=0, max=1) < birth){
lineages[[length(lineages) + 1]] <- cumsum(lineages[[k]])[length(lineages[[k]])]
origins <- c(origins, i)
}
}
}
origins <- 1
lineages <- list()
# the root of the tree
lineages[[1]] <- 0
# loop through generations with i
for(i in 2:(gens)){
# create next gen of every existing lineage
for(j in 1:length(lineages)){
lineages[[j]] <- c(lineages[[j]], rnorm(1))
}
# give each lineage an opportunity to split/speciate
for(k in 1:length(lineages)){
if(runif(1, min=0, max=1) < birth){
lineages[[length(lineages) + 1]] <- cumsum(lineages[[k]])[length(lineages[[k]])]
origins <- c(origins, i)
}
}
}
foo <- list.to.mat(lineages,origins,gens)
rows=lineages
starts=origins
gens=gens
mat.x <- matrix(0,length(rows), gens)
for(i in 1:length(rows)){
mat.x[i, origins:gens] <- rows[[i]]
}
list.to.mat <- function(rows,starts, gens){
# rows is a list with the data for some or all rows
# starts the positions that the above should start in th matrix
# gens a numeric with the number of generations
mat.x <- matrix(0,length(rows), gens)
for(i in 1:length(rows)){
mat.x[i, origins[i]:gens] <- rows[[i]]
}
return(mat.x)
}
gens <- 200
birth <- .01
origins <- 1
lineages <- list()
# the root of the tree
lineages[[1]] <- 0
# loop through generations with i
for(i in 2:(gens)){
# create next gen of every existing lineage
for(j in 1:length(lineages)){
lineages[[j]] <- c(lineages[[j]], rnorm(1))
}
# give each lineage an opportunity to split/speciate
for(k in 1:length(lineages)){
if(runif(1, min=0, max=1) < birth){
lineages[[length(lineages) + 1]] <- cumsum(lineages[[k]])[length(lineages[[k]])]
origins <- c(origins, i)
}
}
}
foo <- list.to.mat(rows=lineages,
starts=origins,
gens=gens)
View(foo)
list.to.mat <- function(rows,starts, gens){
# rows is a list with the data for some or all rows
# starts the positions that the above should start in th matrix
# gens a numeric with the number of generations
mat.x <- matrix(0,length(rows), gens)
for(i in 1:length(rows)){
mat.x[i, origins[i]:gens] <- rows[[i]]
}
return(mat.x)
}
history <- function(gens, birth){
origins <- 1
lineages <- list()
# the root of the tree
lineages[[1]] <- 0
# loop through generations with i
for(i in 2:(gens)){
# create next gen of every existing lineage
for(j in 1:length(lineages)){
lineages[[j]] <- c(lineages[[j]], rnorm(1))
}
# give each lineage an opportunity to split/speciate
for(k in 1:length(lineages)){
if(runif(1, min=0, max=1) < birth){
lineages[[length(lineages) + 1]] <- cumsum(lineages[[k]])[length(lineages[[k]])]
origins <- c(origins, i)
}
}
}
result <- list.to.mat(rows=lineages, starts=origins, gens=gens)
return(result)
}
history(100, .01)
list.to.mat <- function(rows,starts, gens){
# rows is a list with the data for some or all rows
# starts the positions that the above should start in th matrix
# gens a numeric with the number of generations
mat.x <- matrix(0,length(rows), gens)
for(i in 1:length(rows)){
mat.x[i, starts[i]:gens] <- rows[[i]]
}
return(mat.x)
}
history <- function(gens, birth){
origins <- 1
lineages <- list()
# the root of the tree
lineages[[1]] <- 0
# loop through generations with i
for(i in 2:(gens)){
# create next gen of every existing lineage
for(j in 1:length(lineages)){
lineages[[j]] <- c(lineages[[j]], rnorm(1))
}
# give each lineage an opportunity to split/speciate
for(k in 1:length(lineages)){
if(runif(1, min=0, max=1) < birth){
lineages[[length(lineages) + 1]] <- cumsum(lineages[[k]])[length(lineages[[k]])]
origins <- c(origins, i)
}
}
}
result <- list.to.mat(rows=lineages, starts=origins, gens=gens)
return(result)
}
history(100, .01)
foo <- history(100, .01)
View(foo)
matplot(foo)
matplot(foo, type=l)
matplot(foo, type="l")
plot(x=foo[1,],y=1:100, type="l")
matplot(cumsum(foo))
matplot(cumsum(foo),type="l")
matplot(y=cumsum(foo),type="l")
matplot(y=cumsum(foo[,1]),type="l")
matplot(y=cumsum(foo[1,]),type="l")
matplot(y=cumsum(foo[2,]),type="l")
matplot(y=cumsum(foo[1,]),type="l")
matplot(y=cumsum(foo[2,]),type="l")
matplot(y=cumsum(foo[1:2,]),type="l")
matplot(t(foo),type="l")
t(foo)
matplot(cumsum(t(foo)),type="l")
foo <- history(100, .01)
foo <- t(foo)
View(foo)
matplot(foo,type="l")
matplot(cumsum(foo),type="l")
bar <- cumsum(foo)
bar <- apply(cumsum, foo, 2)
help(applu)
help(apply)
bar <- apply(foo, 2, cumsum)
matplot(bar,type="l")
gens <- 200
birth <- .01
list.to.mat <- function(rows,starts, gens){
# rows is a list with the data for some or all rows
# starts the positions that the above should start in th matrix
# gens a numeric with the number of generations
mat.x <- matrix(0,length(rows), gens)
for(i in 1:length(rows)){
mat.x[i, starts[i]:gens] <- rows[[i]]
}
return(mat.x)
}
history <- function(gens, birth){
origins <- 1
lineages <- list()
# the root of the tree
lineages[[1]] <- 0
# loop through generations with i
for(i in 2:(gens)){
# create next gen of every existing lineage
for(j in 1:length(lineages)){
lineages[[j]] <- c(lineages[[j]], rnorm(1))
}
# give each lineage an opportunity to split/speciate
for(k in 1:length(lineages)){
if(runif(1, min=0, max=1) < birth){
lineages[[length(lineages) + 1]] <- cumsum(lineages[[k]])[length(lineages[[k]])]
origins <- c(origins, i)
}
}
}
#result <- list.to.mat(rows=lineages, starts=origins, gens=gens)
return(c(lineages, origins))
}
gens <- 200
birth <- .01
list.to.mat <- function(rows,starts, gens){
# rows is a list with the data for some or all rows
# starts the positions that the above should start in th matrix
# gens a numeric with the number of generations
mat.x <- matrix(0,length(rows), gens)
for(i in 1:length(rows)){
mat.x[i, starts[i]:gens] <- rows[[i]]
}
return(mat.x)
}
history <- function(gens, birth){
origins <- 1
lineages <- list()
# the root of the tree
lineages[[1]] <- 0
# loop through generations with i
for(i in 2:(gens)){
# create next gen of every existing lineage
for(j in 1:length(lineages)){
lineages[[j]] <- c(lineages[[j]], rnorm(1))
}
# give each lineage an opportunity to split/speciate
for(k in 1:length(lineages)){
if(runif(1, min=0, max=1) < birth){
lineages[[length(lineages) + 1]] <- cumsum(lineages[[k]])[length(lineages[[k]])]
origins <- c(origins, i)
}
}
}
#result <- list.to.mat(rows=lineages, starts=origins, gens=gens)
return(c(lineages, origins))
}
history <- function(gens, birth){
origins <- 1
lineages <- list()
# the root of the tree
lineages[[1]] <- 0
# loop through generations with i
for(i in 2:(gens)){
# create next gen of every existing lineage
for(j in 1:length(lineages)){
lineages[[j]] <- c(lineages[[j]], rnorm(1))
}
# give each lineage an opportunity to split/speciate
for(k in 1:length(lineages)){
if(runif(1, min=0, max=1) < birth){
lineages[[length(lineages) + 1]] <- cumsum(lineages[[k]])[length(lineages[[k]])]
origins <- c(origins, i)
}
}
}
#result <- list.to.mat(rows=lineages, starts=origins, gens=gens)
return(c(lineages, origins))
}
x <- history(gens=200, birth=.01)
history <- function(gens, birth){
origins <- 1
lineages <- list()
# the root of the tree
lineages[[1]] <- 0
# loop through generations with i
for(i in 2:(gens)){
# create next gen of every existing lineage
for(j in 1:length(lineages)){
lineages[[j]] <- c(lineages[[j]], rnorm(1))
}
# give each lineage an opportunity to split/speciate
for(k in 1:length(lineages)){
if(runif(1, min=0, max=1) < birth){
lineages[[length(lineages) + 1]] <- cumsum(lineages[[k]])[length(lineages[[k]])]
origins <- c(origins, i)
}
}
}
#result <- list.to.mat(rows=lineages, starts=origins, gens=gens)
results <- list()
results[[1]] <- lineages
results[[2]] <- origins
return(results)
}
x <- history(gens=200, birth=.01)
gens=200
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
history <- function(gens, birth){
origins <- 1
lineages <- list()
# the root of the tree
lineages[[1]] <- 0
# loop through generations with i
for(i in 2:(gens)){
# create next gen of every existing lineage
for(j in 1:length(lineages)){
lineages[[j]] <- c(lineages[[j]], rnorm(1))
}
# give each lineage an opportunity to split/speciate
for(k in 1:length(lineages)){
if(runif(1, min=0, max=1) < birth){
lineages[[length(lineages) + 1]] <- cumsum(lineages[[k]])[length(lineages[[k]])]
origins <- c(origins, i)
}
}
}
results <- list()
results[[1]] <- lineages
results[[2]] <- origins
return(results)
}
x <- history(100, .01)
x <- history(100, .01)
x <- history(100, .01)
x <- history(100, .01)
x <- history(100, .01)
x <- history(100, .01)
x <- history(100, .1)
x <- history(100, .03)
x<- x[[1]]
lineages <- x
time.slice <- vector()
length(lineages)
i <- 1
cumsum(lineages[[i]])
input$mon <- 50
input <- list()
input$mon <- 50
input$mon
time.slice <- vector()
for(i in 1:length(lineages)){
time.slice[i] <- cumsum(lineages[[i]])[input$mon]
}
is.na(time.slice)
!is.na(time.slice)
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
time.slice <- time.slice[!is.na(time.slice)]
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
cumsum(lineages[[i]])
origins[i]
x <- history(200, .01)
x <- history(200, .01)
lineages <- x[[1]]
origins <- x[[2]]
time.slice <- vector()
origins <- list()
origins <- x[[2]]
input <- list()
input$mon <- 170
for(i in 1:length(lineages)){
time.slice[i] <- cumsum(lineages[[i]])[input$mon-origins[i]]
}
time.slice
input$mon-origins[i]
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
shiny::runApp('~/Desktop/playing')
library(devtools)
install_github('coleoguy/evobir')
library(evobiR)
ViewEvo("bm.tree.model")
